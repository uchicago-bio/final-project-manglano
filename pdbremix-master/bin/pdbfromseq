#!/usr/bin/env python

__doc__ = """
Creates a peptide in a PDB from a sequence

usage: pdbfromseq [-h] <sequence> <pdb>

<sequence>   amino acid sequence
<pdb>        name of pdb
"""

import os

from pdbremix import protein
from pdbremix import data
from pdbremix import pdbatoms
from pdbremix import v3
from pdbremix import rmsd
from pdbremix.lib.docopt import docopt


template_pdb = os.path.join(data.data_dir, 'template.pdb')
template_soup = pdbatoms.Soup(template_pdb)
template_residues = [res.type for res in template_soup.residues()]


def make_soup_from_aa(aa):
  res_type = data.res_char_to_name[aa]
  j = template_residues.index(res_type)
  return template_soup.extract_soup(j, j+1)


def superposition(ref_crds, mov_crds):
  ref_center = v3.get_center(ref_crds)
  mov_center = v3.get_center(mov_crds)
  ref_crds = [c - ref_center for c in ref_crds]
  mov_crds = [c - mov_center for c in mov_crds]
  trans_before = v3.translation(-mov_center)
  rot_rmsd, rot = rmsd.pyqcprot_rmsd_rot(mov_crds, ref_crds)
  trans_after = v3.translation(ref_center)
  return v3.combine(trans_after, v3.combine(rot, trans_before))
 

def get_atom_crds(soup, i_res, atom_types):
  result = []
  for atom_type in atom_types:
    result.append(soup.residue(i_res).atom(atom_type).pos)
  return result


##############################################
# routines to deal with backbone splicings
##############################################


def project_prev_ca_c_crds(soup, i):
  "Projects crds of CA and C of residue precedent to i"
  # as PRO has cis-peptide bond, use plane vector instead of C
  if soup.residue(i).type == "PRO":
    ca = soup.residue(i).atom("CA").pos
    n = soup.residue(i).atom("N").pos
    cd = soup.residue(i).atom("CD").pos
    plane = v3.cross(n - ca, cd - ca)
    ref_crds = [ca, n, n + v3.norm(plane)]

    ca = template_soup.residue(2).atom("CA").pos
    n = template_soup.residue(2).atom("N").pos
    h = template_soup.residue(2).atom("H").pos
    plane = v3.cross(n - ca, h - ca)
    mov_crds = [ca, n, n + v3.norm(plane)]
  else:
    ref_crds = get_atom_crds(soup, i, ['N', "CA", 'C'])
    mov_crds = get_atom_crds(template_soup, 2, ['N','CA','C'])

  mat = superposition(ref_crds, mov_crds)

  c = template_soup.residue(1).atom("C").pos
  ca = template_soup.residue(1).atom("CA").pos

  return v3.transform(mat, ca), v3.transform(mat, c)


def get_n_peptide_crds(soup, i):
  "Get crds for CA(i-1)-C(i-1)-N-CA"
  crds = []
  if i > 0:
    crds.extend(get_atom_crds(soup, i-1, ["CA", 'C']))
  else:
    crds.extend(project_prev_ca_c_crds(soup, i))
  crds.extend(get_atom_crds(soup, i, ["N", "CA"]))
  return crds


def project_next_n_ca_crds(soup, i):
  "Get crds for CA-C-N(i+1)-CA(i+1)"
  ref_crds = get_atom_crds(soup, i, ["CA", 'C', 'O'])
  mov_crds = get_atom_crds(template_soup, 2, ['CA', 'C', 'O'])
  mat = superposition(ref_crds, mov_crds)
  n = template_soup.residue(3).atom("N").pos
  ca = template_soup.residue(3).atom("CA").pos
  return v3.transform(mat, n), v3.transform(mat, ca)


def get_c_peptide_crds(soup, i):
  crds = get_atom_crds(soup, i, ["CA", 'C'])
  if i < soup.n_residue()-1:
    crds.extend(get_atom_crds(soup, i+1, ['N', "CA"]))
  else:
    crds.extend(project_next_n_ca_crds(soup, i))
  return crds


def splice_to_c_terminus(soup, insert):
  n_res_soup = soup.n_residue()
  insert.transform(
      superposition(
          get_c_peptide_crds(soup, n_res_soup-1),
          get_n_peptide_crds(insert, 0)))
  soup.insert_soup(n_res_soup, insert)


def splice_to_n_terminus(soup, insert):
  n_res_insert = insert.n_residue()
  insert.transform(
      superposition(
          get_n_peptide_crds(soup, 0),
          get_c_peptide_crds(insert, n_res_insert-1)))
  soup.insert_soup(0, insert)


def splice(soup, i, insert):
  if i > 0:
    insert.transform(
        superposition(
            get_c_peptide_crds(soup, i-1),
            get_n_peptide_crds(insert, 0)))
  if i < soup.n_residue():
    k = insert.n_residue()
    rot2 = superposition(
        get_c_peptide_crds(insert, k-1),
        get_n_peptide_crds(soup, i))
    for res in soup.residues()[i:]:
      res.transform(rot2)
  for res in reversed(insert.residues()):
    soup.insert_residue(i, res)


arg = docopt(__doc__)
sequence = arg['<sequence>']
soup = make_soup_from_aa(sequence[0])
for aa in sequence[1:]:
  splice_to_c_terminus(soup, make_soup_from_aa(aa))
soup.write_pdb(arg['<pdb>'])




