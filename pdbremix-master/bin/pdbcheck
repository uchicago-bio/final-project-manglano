#!/usr/bin/env python
# encoding: utf-8

__doc__ = """
Checks PDB for structural integrity for MD simulations.

Usage: pdbcheck [-h] <pdb> ...
"""

import os

from pdbremix import pdbatoms
from pdbremix import data
from pdbremix import v3
from pdbremix import pdbtext
from pdbremix.lib.docopt import docopt


cached = {}
def get_structure(pdb):
  if pdb not in cached:
    cached[pdb] = pdbatoms.Soup(pdb)
  return cached[pdb]
  
  
def clash_in_residues(r1, r2):
  for a1 in r1.atoms():
    for a2 in r2.atoms():
      d = v3.distance(a1.pos, a2.pos)
      for a in [a1, a2]:
        if a.element == "H":
          d += 0.5
      if d < 2:
        return True
  return False


def check_clash_in_pdb(pdb):
  p = get_structure(pdb)
  n_residue = p.n_residue()
  for i in range(n_residue):
    for j in range(i+2, n_residue):
      r1 = p.residue(i)
      r2 = p.residue(j)
      if r1.has_atom("CA") and r2.has_atom("CA"):
        ca1_pos = r1.atom("CA").pos
        ca2_pos = r2.atom("CA").pos
        if v3.distance(ca1_pos, ca2_pos) > 9:
          continue
      if clash_in_residues(r1, r2):
        print "       steric clash:", r1.tag(), r2.tag()
            

def strip_digits(s):
  new_s = ""
  for c in s:
    if not c.isdigit():
      new_s += c
  return new_s


def not_hydrogen(atom_name):
  return strip_digits(atom_name)[0] != "H"

  
module_dir = os.path.dirname(data.__file__)
template_res = {}
aminoacids = pdbatoms.Soup(os.path.join(module_dir, 'data', 'aminoacid.pdb'))
for r in aminoacids.residues():
  template_res[r.type] = r


def incomplete(res):
  if res.type not in template_res:
    return False
  standard_atoms = template_res[res.type].atoms()
  for a in standard_atoms:
    if not res.has_atom(a.type) and not_hydrogen(a.type):
      return True
  return False
  

def incomplete_residues(p):
  pair = lambda res: (res.tag(), res.type)
  return [pair(r) for r in p.residues() if incomplete(r)]


def check_missing_atoms_in_residue(pdb):
  my_chain = get_structure(pdb)
  mutate_residues = incomplete_residues(my_chain)
  for res_id, res_type in mutate_residues:
    print "       missing atoms:", res_id, res_type


def check_nonstandard_residues(pdb):
  for res in get_structure(pdb).residues():
    res_id = res.tag()
    res_type = res.type
    if res_type not in template_res:
      if res_type not in data.solvent_res_types:
        print "       unrecognized residue %s - %s" % (res_id, res_type)


def check_disulfide_bonds(pdb):
  protein = get_structure(pdb)
  residues = protein.residues()
  n_residue = len(residues)
  cystines = [i for i in range(n_residue) 
              if residues[i].type == "CYS"]
  for i in cystines:
    p1 = residues[i].atom("SG").pos
    for j in cystines:
      if j>i:
        p2 = residues[j].atom("SG").pos
        d = v3.distance(p1, p2)
        if d < 4:
          print "       disulfide bond: %s - %s" % \
              (residues[i].tag(), residues[j].tag())


def check_peptide_bonds(pdb):
  structure = get_structure(pdb)
  residues = structure.residues()
  n_residue = len(residues)
  is_all_good = True
  for i in range(n_residue):
    if i<n_residue-1:
      r1 = structure.residue(i)
      r2 = structure.residue(i+1)  
      if r1.has_atom("C") and r2.has_atom("N"):
        c = r1.atom("C").pos
        n = r2.atom("N").pos
        is_bonded = v3.distance(c, n) < 2
        if not is_bonded:
          print "       chain break: %s-C -> %s-N" %  (r1.tag(), r2.tag())
          is_all_good = False


def check_alternate_conformations(pdb):
  conforms = {}
  res_names = []
  for line in open(pdb):
    if line.startswith(('ATOM', 'HETATM')):
      a = pdbatoms.AtomFromPdbLine(line)
      if a.alt_conform != " ":
        res_name =  "%s:%s-%s" % (a.chain_id, a.res_num, a.type)
        if res_name not in conforms:
          conforms[res_name] = []
          res_names.append(res_name)
        conforms[res_name].append(a.alt_conform)
  for res_name in res_names:
    print "       Conformations of %s: %s" % (res_name, '/'.join(conforms[res_name])) 


def check_multiple_models(pdb):  
  parts = []
  parts.append([])
  for line in open(pdb):
    if line.startswith('END'):
      parts.append([])
      continue
    if not line.startswith(('ATOM', 'HETATM')):
      continue
    if not line.strip:
      continue
    parts[-1].append(line)
  if not parts[-1]:
    parts.pop(-1)
  if len(parts) > 1:
    print "       number of models: %d" % len(parts)
    print "** following only applies to Model 1 **"


def check_pdb(pdb):
  print ">>", pdb
  if not os.path.isfile(pdb):
    print "Couldn't find", pdb
    return
  print "  1: Multiple Models"
  check_multiple_models(pdb)
  print "  2. Steric Clashes"
  check_clash_in_pdb(pdb)
  print "  3. Chain Breaks"
  check_peptide_bonds(pdb)
  print "  4. Disulfide Bonds"
  check_disulfide_bonds(pdb)
  print "  5. Incomplete Amino Acids"
  check_missing_atoms_in_residue(pdb)
  print "  6. Nonstandard Residues"
  check_nonstandard_residues(pdb)
  print "  7. Alternate Conformations"
  check_alternate_conformations(pdb)


if __name__ == '__main__':
  for pdb in docopt(__doc__)['<pdb>']:    
    check_pdb(pdb)

