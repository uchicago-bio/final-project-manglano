#!/usr/bin/env python

__doc__ = """
Calculates the accessible surface-area a PDB file. 

Algorithm adapted from Rose lab's chasa.py implementation of
Shrake & Rupley (19743) JMB:351. (c) 2007 Bosco Ho.

Usage: pdbasa [-h -o -n <n_sphere>] <in_pdb> [<out_pdb>]

  <out_pdb>   PDB file in which the atomic ASA values are written 
              to the b-factor column.
  -n <n_sphere>  number of points used in generating the spherical
              dot-density for the calculation (default=960). The 
              more points, the more accurate (but slower) the 
              calculation. 
  -o  use optimized routine
"""

from pdbremix.asa import calculate_asa, calculate_asa_optimized
from pdbremix import pdbatoms
from pdbremix.lib.docopt import docopt

if __name__ == "__main__":
  arg = docopt(__doc__)

  n_sphere = 960
  if arg['-n']:
    n_sphere = int(arg['-n'])
  print "Points on sphere: ", n_sphere

  atoms = pdbatoms.read_pdb(arg['<in_pdb>'])
  pdbatoms.add_radii(atoms)

  if arg['-o']:
    asas = calculate_asa_optimized(atoms, 1.4, n_sphere)
  else:
    asas = calculate_asa(atoms, 1.4, n_sphere)
  print "%.1f angstrom squared." % sum(asas)

  if arg['<out_pdb>']:
    for asa, atom in zip(asas, atoms):
      atom.bfactor = asa
    pdbatoms.write_pdb(atoms, arg['<out_pdb>'])

    