#!/usr/bin/env python

__doc__ = """
Display AMBER, GROMACS, NAMD trajectories in VMD.

usage: trajvmd [-h] <md>
"""


import os
import sys
from pdbremix.lib.docopt import docopt
from pdbremix import data


vmd_script = """
# turn on lights 0 and 1
light 0 on
light 1 on
light 2 off
light 3 off

# position the stage and axes
axes location off
stage location off

# position and turn on menus
menu main on
menu graphics on
menu main move 700 60
menu graphics move 700 340

display projection orthographic
display depthcue on
display cuestart 1.5
display cueend 2.75
display cuemode Linear

mol new "%(top)s" type %(ext_top)s
mol delrep 0 0
mol addfile "%(trj)s" type %(ext_trj)s
mol selection {backbone}
mol representation NewCartoon 0.40 20.00 2.50 0
mol addrep top
mol selection {(not (protein and backbone or water) or name CA) and not name "[0-9]?H.*"}
mol representation CPK 1.4 2 8 6
mol addrep top
mol smoothrep top 0 2
mol smoothrep top 1 2
"""


def has_files(*fnames):
  for fname in fnames:
    if not os.path.isfile(fname):
      return False
  return True


def get_params(in_md):
  if has_files(in_md+'.top', in_md+'.trj'):
    return {
        'ext_top': 'parm7',
        'ext_trj': 'crd',
        'top': in_md + '.top', 
        'trj': in_md + '.trj' ,
        }
  if has_files(in_md+'.gro', in_md+'.trr'):
    return {
        'ext_top': 'gro',
        'ext_trj': 'trr',
        'top': in_md + '.gro', 
        'trj': in_md + '.trr' ,
        }
  if has_files(in_md+'.psf', in_md+'.dcd'):
    return {
        'ext_top': 'psf',
        'ext_trj': 'dcd',
        'top': in_md + '.psf', 
        'trj': in_md + '.dcd' ,
        }
  raise Exception('Couldn\'t figure out MD trajectory for ' + in_md)


arg = docopt(__doc__, sys.argv[1:])
vmd = data.binary("vmd")
params = get_params(arg['<md>'])
cmd_fname = arg['<md>'] + '.vmd'
open(cmd_fname, 'w').write(vmd_script % params)
data.binary('vmd', ' -e ' + cmd_fname)
os.remove(cmd_fname)


