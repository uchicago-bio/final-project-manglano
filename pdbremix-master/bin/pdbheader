#!/usr/bin/env python

__doc__ = """
Generates short summary of PDB files.

Usage: pdbheader [-h] <pdb> ...
"""

from pdbremix.lib.docopt import docopt


def get_key_value(key, line):
  words = line.split()
  result = ''
  for i in range(len(words)):
    if key in words[i]:
      for j in range(i+1, len(words)):
        result += words[j] + ' '
        if ';' in words[j]:
          break
      break
  result = result.strip()
  if len(result) > 0 and result[-1] == ';':
    result = result[:-1]
  return result
  

def extract_metadata(pdb):
  entry = dict()
  entry['pdb_id'] = 'XXXX'
  entry['resolution'] = 'XXXX'
  entry['date'] = 'XX-XXX-XX'
  entry['compound'] = '' 
  entry['protein_type'] = '' 
  entry['organism'] = ''
  
  lines = open(pdb, 'r').readlines()
  compound = ''
  source = ''
  for line in lines:
    words = line.split()
    if len(words) == 0:
      continue
    if words[0] in 'HEADER':
      if len(line) >= 66:
        entry['pdb_id'] = line[62:66]
      if len(line) >= 59:
        entry['date'] = line[50:59]
      if len(line) >= 50:
        entry['protein_type'] = line[10:50].strip()
    elif words[0] in 'COMPND':
      if len(line) > 70:
        compound += line[10:70].strip() + ' '
    elif words[0] in 'SOURCE':
      if len(line) > 70:
        source += line[10:70].strip() + ' '
    elif words[0] in 'REMARK':
      if len(words) >= 4:
        if words[1] in '2':
          if 'RESOLUTION' in words[2]:
            entry['resolution'] = words[3].ljust(4, '0')
      
  organism = get_key_value('ORGANISM_COMM', source)
  if len(organism) == 0:
    organism = get_key_value('ORGANISM_SCIE', source)
  if len(organism) > 0:
    entry['organism'] = ' from ' + organism.lower()
  else:
    entry['organism'] = ''

  molecule_name = get_key_value('MOLECULE', compound)
  if len(molecule_name) == 0:
    entry['compound'] = compound
  else:
    entry['compound'] = molecule_name
    fragment = get_key_value('FRAGMENT', compound) 
    if len(fragment) > 0:
      entry['compound'] += ', ' + fragment
  return entry
 
 
def header_string(pdb):
  entry = extract_metadata(pdb)
  stats = "%(pdb_id)s  %(resolution)s  %(date)s  " % entry
  description = "%(compound)s  {%(protein_type)s%(organism)s}" % entry
  lines = []
  line = ''
  for word in description.split():
    if len(word) + len(line) < 53:
      line += word + ' '
    else:
      lines.append(line + '\n')
      line = '  ' + word + ' '
  if line:
    lines.append(line)
  description = '                     '.join(lines)
  return stats + description


for pdb in docopt(__doc__)['<pdb>']:
  print header_string(pdb) 

