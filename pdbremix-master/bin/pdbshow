#!/usr/bin/env python

__doc__ = """
Shows PDB using PYMOL with residue centering and B-factor coloring.

Usage: pdbshow [options] <pdb> ...

-g BGCOLOR   background color

-w   suppress waters

-s   turn-off sticks 
-e   peptide style: backbone spheres, sidechain sticks

-b   red-white coloring for b-factors
-x   blue-white-red coloring for b-factors
-p   putty mode with b-factors
-l LOWER   lower bound for b-factor color scaling
-u UPPER   upper bound for b-factor color scaling 

-r RES  highlight residue with sticks and green
-c RES  residue to center to
-t RES  residue to place above center

-o   output png

-q   quit after rendering
"""


import os
from pdbremix.lib.docopt import docopt
from pdbremix import util
from pdbremix import pymol
from pdbremix import data
from pdbremix import protein


if __name__=="__main__":
  arg = docopt(__doc__)

  pdbs = arg['<pdb>']
  util.check_files(*pdbs)

  is_sticks = not (arg['-s'] is True)
  is_polar = arg['-x'] is True

  max_bfactor = None
  lower_bfactor = float(arg['-l']) if arg['-l'] else None
  upper_bfactor = float(arg['-u']) if arg['-u'] else None
  is_bfactor = arg['-b'] is True
  if lower_bfactor is not None or upper_bfactor is not None:
    if not is_polar and not is_bfactor:
      is_bfactor = True

  is_putty = False
  if arg['-p']:
    is_bfactor = True
    is_putty = True
    is_sticks = False

  highlight_res = arg['-r']
  center_res = arg['-c']
  top_res = arg['-t']

  temp_pdbs = []
  if center_res is not None:
    pdbs = protein.transform_pdbs_to_residues_of_first_pdb(
        pdbs, center_res, top_res)
    temp_pdbs.extend(pdbs)
  if arg['-w']:
    pdbs = [protein.strip_solvent_pdb(pdb) for pdb in pdbs]
    temp_pdbs.extend(pdbs)
  if is_bfactor:
    pdbs, max_bfactor = pymol.rescale_positive_bfactors_of_pdbs(
        pdbs, lower_bfactor, upper_bfactor)
    temp_pdbs.extend(pdbs)
  elif is_polar:
    pdbs, max_bfactor = pymol.rescale_positive_negative_bfactor_pdbs(
        pdbs, lower_bfactor, upper_bfactor)
    temp_pdbs.extend(pdbs)
    
  script = ""
  if arg['-g']:
    script += pymol.make_bgcolor_script(arg['-g'])
  script += pymol.make_load_pdbs_script(pdbs)
  if is_bfactor:
    script += pymol.red_white_gradient_script
  elif is_polar:
    script += pymol.blue_white_red_gradient_script
  else:
    script += pymol.make_separate_chain_colors_script(pdbs)
  if is_putty:
    script += pymol.make_putty_script(pymol.get_scale_max(max_bfactor, upper_bfactor))
  else:
    script += pymol.cartoon_script
  if lower_bfactor is not None:
    script += pymol.make_sticks_above_bfactor_script(lower_bfactor)
  else:
    script += "show stick\n"
  script += pymol.make_ligands_as_sticks_script(pdbs)
  if arg['-e']:
    script += pymol.peptide_style_script
  script += pymol.hide_backbone_sticks_script
  if not is_sticks:
    script += "hide stick\n"
  script += "remove resn XXX\n"
  if center_res:
    script += "center %s\n" % pymol.get_pymol_id_from_res_tag(center_res)
  if highlight_res is not None:
    res = pymol.get_pymol_id_from_res_tag(highlight_res)
    script += pymol.make_highlight_res_script(res)
  if arg['-o']:
    script += "save %s\n" % out_file
  if arg['-q']:
    script += "quit\n"

  pml = 'pdbshow.pml'
  open(pml, 'w').write(script)
  pymol.run_pymol_script(pml, 800, 800)
  util.clean_fname(pml)
  util.clean_fname(*temp_pdbs)


