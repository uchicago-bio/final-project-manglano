#!/usr/bin/env python

__doc__ = """
Inserts loops into PDB using Modeller

Usage: pdbinsert [-h -m <n_model>] <pdb> <name> [<resname> <seq>] ...

Args:
  -m <n_model>  number of models [default: 5]
  <pdb>         PDB file 
  <name>        directory in which results are stored
  <resname>     residue indicating the insertion point of loop.
                e.g. "A:15" meaning chain "A" and residue "15"
  <seq>         the sequence of loop to be inserted.
"""


import os
import glob
import shutil

from pdbremix.lib.docopt import docopt
from pdbremix import pdbatoms
from pdbremix import data
from pdbremix import pdbtext
from pdbremix import util


def format_string(s, width=60):
  len_seq = len(s)
  result = ""
  for i in range(0, len_seq, width):
    result += s[i:i + width] + '\n'
  return result
  

def make_alignment_file(
    align_file, pdb, initial_name, basename,
    template_seq, target_seq):
  f = open(align_file, 'w')
  f.write('C; alignment in the PIR format\n')

  f.write('\n>P1;' + initial_name + '\n')
  protein = pdbatoms.Soup(pdb)
  chain1 = protein.residue(0).chain_id
  res_num1 = protein.residue(0).num
  n = protein.n_residue()
  i = n-1
  chain2 = protein.residue(i).chain_id
  res_num2 = protein.residue(i).num
  f.write('structureX:%s:%d:%s:%d:%s::::\n' % \
          (pdb.replace('.pdb', ''), res_num1, 
           chain1, res_num2, chain2))
  f.write(format_string(template_seq))

  f.write('\n>P1;' + basename + '\n')
  f.write('sequence:' + basename + '::::::::\n')
  f.write(format_string(target_seq))

  f.close()


modeller_script = """
# Homology modeling by the automodel class
from modeller import *
from modeller.automodel import *    # Load the automodel class

log.verbose()
env = environ()

# directories for input atom files
env.io.atom_files_directory = ['.']

a = loopmodel(
    env,
    alnfile  = '%(align_ali)s',      # alignment filename
    knowns   = '%(in_pdb)s',         # codes of the templates
    sequence = '%(out_target)s')     # code of the target

# determines how many models to calculate
a.starting_model= 1                  # index of the first model
a.ending_model  = 1                  # index of the last model

a.md_level = None                    # No refinement of model
 
a.loop.starting_model = 1            # First loop model
a.loop.ending_model   = %(n_loop)s   # Last loop model
a.loop.md_level       = refine.fast  # Loop model refinement level

# do homology modeling 
a.make()                             
"""

def model_loop(
    align_file, template_seq, initial_name, basename, n_loop=4):
  script = modeller_script % {
    'in_pdb': initial_name,
    'out_target': basename,
    'align_ali': align_file,
    'n_loop': str(n_loop),
  }
  py_name = basename + '.py'
  f = open(py_name,'w').write(script)
  data.binary('mod9v8', py_name, basename+'.modeller')


def find_insertion(test_res_id, pairs):
  for res_id, seq in pairs:
    if res_id == test_res_id:
      return res_id, seq
  return '', ''
  
  
def make_template_sequences_and_pdb(
    raw_pdb, pdb, insertions):
  """
  Returns the template sequence and target sequence of an 
  insertion, as well as the template PDB file.
  """
  p = pdbatoms.Soup(raw_pdb)
  template_seq = ""
  target_seq = ""
  # must do reversed because deleting residues needs
  # to start from the end in order for the indices not
  # to get screwed up
  for i in reversed(range(len(p.residues()))):
    residue = p.residue(i)
    res_id = residue.tag()

    insert_res_id, insert_seq = find_insertion(res_id, insertions)

    if insert_res_id:
      blank_seq = "-"*len(insert_seq)
      template_seq = blank_seq + template_seq
      target_seq = insert_seq + target_seq

    if residue.type in data.res_name_to_char:
      c = data.res_name_to_char[residue.type]
      template_seq = c + template_seq
      target_seq = c + target_seq
    else:
      template_seq = '.' + template_seq
      target_seq = '.' + target_seq

    if (i>0):
      chain_id = p.residue(i).chain_id
      prev_chain_id = p.residue(i-1).chain_id
      if chain_id != prev_chain_id:
        template_seq = '/' + template_seq
        target_seq = '/' + target_seq

  template_seq += "*"
  target_seq += "*"
  
  f = open(pdb.replace('.pdb', '.resid'), 'w')
  i = 0
  for a, b in zip(template_seq, target_seq):
    if a=="*" or a=="/":
      break
    if a != "-":
      chain_id = p.residue(i).chain_id
      num = p.residue(i).num
      res_type = p.residue(i).type
      i += 1
    else:
      res_type = data.res_char_to_name[b]
      num += 1
    f.write("%s:%d %s\n" % (chain_id, num, res_type))
  f.close()
  
  p.write_pdb(pdb)  
  
  return template_seq, target_seq


def get_score_sorted_pdbs(basename):
  """
  Returns a ranked list of MODELLER scores and output PDB files.
  """
  results = []
  for fname in glob.glob(basename + '.DL*'):
    lines = [l for l in open(fname, 'r').readlines() if l.strip()]
    words = lines[-1].split()
    energy = float(words[1])
    pdb = fname.replace('DL', 'BL')+'.pdb'
    pdb = os.path.abspath(pdb)
    results.append((energy, pdb))
  results.sort(reverse=True)
  return results


def insert_sequences_into_pdb(
    raw_pdb, basename, insertions, n_model):
  """
  Runs MODELLER to insert loops into a PDB file.

  Args:
    - insertions: list of insertions

  An insertion is a 2-tuple of strings e.g. [('B:23', 'Q')],
  which consists of:
    1. the residue tag of the insertion point 'B:23', which
       in this case refers to chain 'B' and residue number '23'
    2. the sequence of the insertion, which here is 'Q' glutamine

  """
  save_dir = os.getcwd()

  raw_pdb = os.path.abspath(raw_pdb)

  basename = arg['<name>']
  print "Modeller directory:", basename+'.modeller'
  util.goto_dir(basename+'.modeller')

  clean_pdb = basename + '.clean.pdb'
  pdbtext.clean_pdb(raw_pdb, clean_pdb)

  print "Generating alignment sequences"
  template_pdb = basename + '.init.pdb'
  template_seq, target_seq = make_template_sequences_and_pdb(
      clean_pdb, template_pdb, insertions)

  initial_name = 'init'
  align_file = basename + '.ali'
  make_alignment_file(
      align_file, template_pdb, initial_name, basename,
      template_seq, target_seq)

  print "Running MODELLER ..."
  model_loop(
      align_file, template_seq, initial_name, basename, n_model)

  modeller_results = get_score_sorted_pdbs(basename)

  os.chdir(save_dir)

  f = open(basename+'.scores', 'w')
  for i, (energy, in_pdb) in enumerate(modeller_results):
    out_pdb = basename + '%d.pdb' % (i+1)
    f.write("Energy:%f, PDB:%s\n " % (energy, out_pdb))
    print "Model %d: %s" % (i+1, out_pdb)
    shutil.copy(in_pdb, out_pdb)
  f.close()

  print "Scores:", basename + '.scores'


if __name__ == "__main__":
  arg = docopt(__doc__)

  print ">>> Inserting loops into PDB structure"

  pdb = arg['<pdb>']
  print "PDB:", pdb

  insertions = list(zip(arg['<resname>'], arg['<seq>']))
  for i, (resname, seq) in enumerate(insertions):
    print "Insert: %d. '%s' after residue %s" % (i+1, seq, resname)

  n_model = int(arg['-m'])
  print "Number of models:", n_model

  basename = arg['<name>']

  insert_sequences_into_pdb(pdb, basename, insertions, n_model)



